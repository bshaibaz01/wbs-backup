#!/bin/bash

set -euf -o pipefail

source "$1"

tmp="tmp"

control_target="$tmp/control"
filter_target="$tmp/filter"
align_target="$tmp/align"

mkdir -p "$tmp"

test -d "$control_target" || zbackup --non-encrypted init "$control_target"
test -d "$filter_target" || zbackup --non-encrypted init "$filter_target"
test -d "$align_target" || zbackup --non-encrypted init "$align_target"

function lock {

	echo -n $'\n\n\E[31;1m           ·  ·  ·  ·  ·  ·   waiting   ·  ·  ·  ·  ·  ·\n'

	flock --exclusive 200

	echo -n $'\r\E[A\E[2K\E[0m\E[2A'

}

function work {

	echo -n $'\n\n\E[32;1m         \E[5m<<   <<   <<   <<\E[25m    working'
	echo -n $'    \E[5m>>   >>   >>   >>\E[25m\n'

	sleep 1

}

function unwork {

	sleep 1

	echo -n $'\r\E[A\E[2K\E[0m\E[3A\E['"$1"$'C\E[32;1m✓\E[0m\n'

}

for reorder in 0 1 2 3 4 5 6 7 8 9 a b c d e f; do
for backup in "${backups[@]}"; do
for date in "${dates[@]}"; do

	backup_hash="$( sha1sum <<<"$backup-$date" )"
	backup_hash_1="${backup_hash:0:1}"
	backup_hash_2="${backup_hash:1:1}"

	if ! test -f "$backup-$date"; then
		continue
	fi

	if test "$backup_hash_2" != "$reorder"; then

		continue
	fi

	if test "$backup_hash_1" != "$2" \
		-a "$backup_hash_1" != "$3" \
		-a "$backup_hash_1" != "$4" \
		-a "$backup_hash_1" != "$5"
	then
		continue
	fi

	backup_basename="$( basename "$backup" )"

	if test -f "$control_target/backups/$backup_basename-$date" \
		-a -f "$filter_target/backups/$backup_basename-$date" \
		-a -f "$align_target/backups/$backup_basename-$date"
	then
		continue
	fi

	echo -n $'\Ec\n\E[33;1m ================================================='
	echo -n $'====================\r======  '"$backup_basename $date"$'  \n\n'

	echo $'\E[34;1m'"$(date) Extracting"$'\E[0m'

	work

	nice \
	ionice -c 3 \
	zbackup \
		--non-encrypted \
		restore \
		--silent \
		--cache-size "${cache_size}MB" \
		"$backup-$date" \
		> "$tmp/$$"

	unwork 40

	if ! test -f "$control_target/backups/$backup_basename-$date"; then

		(

			lock

			echo $'\E[36;1m'"$(date) Creating control"$'\E[0m'

			work

			rm -rf "$control_target/tmp"

			zbackup \
				--non-encrypted \
				backup \
				--silent \
				--cache-size "${cache_size}MB" \
				--threads "$threads" \
				"$control_target/backups/$backup_basename-$date" \
				< "$tmp/$$" \
				2> /dev/null

			unwork 46

		) 200>"$tmp/lock-control"

	fi

	if ! test -f "$filter_target/backups/$backup_basename-$date"; then

		(

			lock

			echo $'\E[36;1m'"$(date) Creating filter"$'\E[0m'

			work 

			rm -rf "$filter_target/tmp"

			target/release/tar-filter \
				pack \
				< "$tmp/$$" \
			| zbackup \
				--non-encrypted \
				backup \
				--silent \
				--cache-size "${cache_size}MB" \
				--threads "$threads" \
				"$filter_target/backups/$backup_basename-$date" \
				2> /dev/null

			unwork 45

		) 200>"$tmp/lock-filter"

	fi

	if ! test -f "$align_target/backups/$backup_basename-$date"; then

		(

			lock

			echo $'\E[36;1m'"$(date) Creating align"$'\E[0m'

			work

			rm -rf "$align_target/tmp"

			target/release/tar-filter \
				packalign \
				< "$tmp/$$" \
			| zbackup \
				--non-encrypted \
				backup \
				--silent \
				--cache-size "${cache_size}MB" \
				--threads "$threads" \
				"$align_target/backups/$backup_basename-$date" \
				2> /dev/null

			unwork 44

		) 200>"$tmp/lock-align"

	fi

	rm "$tmp/$$"

	exec "$0" "$@"

done
done
done

# ex: noet ts=4 filetype=bash
