#!/bin/bash

set -euf -o pipefail

config="$1"; shift

source "$config"

tmp="tmp"

control_target="$tmp/control"
filter_target="$tmp/filter"
align_target="$tmp/align"

mkdir -p "$tmp"

test -d "$control_target" || zbackup --non-encrypted init "$control_target"
test -d "$filter_target" || zbackup --non-encrypted init "$filter_target"
test -d "$align_target" || zbackup --non-encrypted init "$align_target"

function lock {

	echo -n $'\n\n\E[31;1m           ·  ·  ·  ·  ·  ·   waiting   ·  ·  ·  ·  ·  ·\n'

	flock --exclusive --wait 30 200

	echo -n $'\r\E[A\E[2K\E[0m\E[2A'

}

function work {

	echo -n $'\n\n\E[32;1m         \E[5m<<   <<   <<   <<\E[25m    working'
	echo -n $'    \E[5m>>   >>   >>   >>\E[25m\n'

	sleep 1

}

function unwork {

	sleep 1

	echo -n $'\r\E[A\E[2K\E[0m\E[3A\E['"$1"$'C\E[32;1m✓\E[0m\n'

}

while true; do

for reorder in $(shuf -e {0..9} {a..f}); do
for divide in $(shuf -e $@); do
for backup in "${backups[@]}"; do
for date in "${dates[@]}"; do

	backup_long="$backup-$date"
	backup_short="$( basename "$backup" )-$date"

	backup_hash="$( sha1sum <<<"$backup_short" )"
	backup_hash_1="${backup_hash:0:1}"
	backup_hash_2="${backup_hash:1:1}"

	if ! test -f "$backup_long"; then
		continue
	fi

	if test "$backup_hash_1" != "$divide"; then
		continue
	fi

	if test "$backup_hash_2" != "$reorder"; then
		continue
	fi

	if test -f "$control_target/backups/$backup_short" \
		-a -f "$filter_target/backups/$backup_short" \
		-a -f "$align_target/backups/$backup_short"
	then
		continue
	fi

	echo -n $'\Ec\n\E[33;1m ================================================='
	echo -n $'====================\r======  '"$backup_short"$'  \n\n'

	echo $'\E[34;1m'"$(date) Extracting"$'\E[0m'

	work

	nice \
	ionice -c 3 \
	zbackup \
		--non-encrypted \
		restore \
		--silent \
		--cache-size "${cache_size}MB" \
		"$backup-$date" \
	| $compress \
		> "$tmp/$backup_short.$compressed_extension"

	unwork 40

	if ! test -f "$control_target/backups/$backup_short"; then

		(

			if lock; then

				echo $'\E[36;1m'"$(date) Creating control"$'\E[0m'

				work

				rm -rf "$control_target/tmp"

				$uncompress \
					"$tmp/$backup_short.$compressed_extension" \
				| zbackup \
					--non-encrypted \
					backup \
					--silent \
					--cache-size "${cache_size}MB" \
					--threads "$threads" \
					"$control_target/backups/$backup_short" \
					2> /dev/null

				unwork 46

			else

				echo $'\E[36;1m'"$(date) Skipped control"$'\E[0m'

			fi

		) 200>"$tmp/lock-control"

	fi

	if ! test -f "$filter_target/backups/$backup_short"; then

		(

			if lock; then

				echo $'\E[36;1m'"$(date) Creating filter"$'\E[0m'

				work

				rm -rf "$filter_target/tmp"

				$uncompress \
					"$tmp/$backup_short.$compressed_extension" \
				| target/release/tar-filter \
					pack \
				| zbackup \
					--non-encrypted \
					backup \
					--silent \
					--cache-size "${cache_size}MB" \
					--threads "$threads" \
					"$filter_target/backups/$backup_short" \
					2> /dev/null

				unwork 45

			else

				echo $'\E[36;1m'"$(date) Skipped filter"$'\E[0m'

			fi

		) 200>"$tmp/lock-filter"

	fi

	if ! test -f "$align_target/backups/$backup_short"; then

		(

			if lock; then

				echo $'\E[36;1m'"$(date) Creating align"$'\E[0m'

				work

				rm -rf "$align_target/tmp"

				$uncompress \
					"$tmp/$backup_short.$compressed_extension" \
				| target/release/tar-filter \
					packalign \
				| zbackup \
					--non-encrypted \
					backup \
					--silent \
					--cache-size "${cache_size}MB" \
					--threads "$threads" \
					"$align_target/backups/$backup_short" \
					2> /dev/null

				unwork 44

			else

				echo $'\E[36;1m'"$(date) Skipped align"$'\E[0m'

			fi

		) 200>"$tmp/lock-align"


	fi
	rm "$tmp/$backup_short.$compressed_extension"

done
done
done
done
date

sleep 60
done

# ex: noet ts=4 filetype=bash
